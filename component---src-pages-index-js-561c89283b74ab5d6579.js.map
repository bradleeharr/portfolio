{"version":3,"file":"component---src-pages-index-js-561c89283b74ab5d6579.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/index.js","webpack://gatsby-starter-default/./src/pages/vortex.js"],"sourcesContent":["import React from 'react';\r\nimport \"./styles/index.css\";\r\n//import GameOfLifeAnimation from './vortex.js';\r\nimport Animation from './vortex.js';\r\nconst Index = () => {\r\n\r\n  const handleNavigation = (section) => {\r\n    document.getElementById(section).scrollIntoView({behavior: 'smooth'});\r\n  }\r\n\r\n  const handleOpenResume = () => {\r\n    window.open('assets/resume.pdf');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/*<header className=\"main-header \" role=\"header\">\r\n        <div className=\"logo\">\r\n          <a onClick={() => handleNavigation('top')}><em>./</em></a>\r\n        </div>\r\n        <nav id=\"menu\" className=\"main-nav\" role=\"navigation\">\r\n          <ul className=\"main-menu\">\r\n            <li><a href=\"#section1\">Home</a></li>\r\n            <li><a href=\"#section3\">About Me</a></li>\r\n            <li><a href=\"#section6\">Contact</a></li>\r\n            <li><a onClick={handleOpenResume}>Resume</a></li>\r\n          </ul>\r\n        </nav>\r\n      </header> */}\r\n\r\n      <section className=\"section main-banner\" id=\"top\" data-section=\"section1\">\r\n      <div id=\"bg-video\" style={{width: '100vw', height: '100vh'}}>\r\n        <Animation />\r\n    </div>\r\n    <div id=\"title\"></div>\r\n        <div className=\"video-overlay header-text\">\r\n            <div className=\"caption\">\r\n            <h1  style={{ color: 'orange' }}>Bradlee Harrison</h1>\r\n                <h6>Electrical and Computer Engineering</h6>\r\n                <div className=\"main-button\">\r\n                    <a href=\"/home\">See more</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nfunction Animation() {\r\n    const containerRef = useRef(null);\r\n      useEffect(() => {\r\n      console.log('Script Loaded');\r\n      const container = containerRef.current;\r\n      if (!container) return;\r\n  \r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const titleDiv = document.createElement('div');\r\n      titleDiv.id = 'titleDiv';\r\n  \r\n      const totalCells = 100000;\r\n  \r\n      let canvasWidth = container.clientWidth;\r\n      let canvasHeight = container.clientHeight;\r\n      let cellSize = Math.sqrt((canvasWidth * canvasHeight) / totalCells);\r\n  \r\n  \r\n      let width = Math.floor(container.clientWidth / cellSize);\r\n      let height = Math.floor(container.clientHeight / cellSize);\r\n  \r\n      let grid = createGrid(width, height);\r\n      let nextGrid = createGrid(width, height);\r\n  \r\n      let waveAmplitude = 30000;\r\n      let columnsToUpdate = width;\r\n      let offset = 0;\r\n      let columnToUpdate = 0;\r\n      \r\n      let updateCounter = 0;\r\n      let stopPopTime = 2;\r\n      let resetTime = 250;\r\n      let dePopTime = 60;\r\n      let randAmt = 0.05;\r\n      // Set canvas size to match the container\r\n      canvas.width = container.clientWidth;\r\n      canvas.height = container.clientHeight;\r\n  \r\n      // Append canvas and title div to the container\r\n      container.appendChild(canvas);\r\n      container.appendChild(titleDiv);\r\n  \r\n      ctx.globalAlpha = 1.0;\r\n  \r\n      // Recalculate on resize\r\n      function resizeListener() {\r\n        canvasWidth = container.clientWidth;\r\n        canvasHeight = container.clientHeight;\r\n        canvas.width = canvasWidth;\r\n        canvas.height = canvasHeight;\r\n    \r\n        let newCellSize = Math.sqrt((canvasWidth * canvasHeight) / totalCells);\r\n        let newWidth = Math.floor(canvasWidth / newCellSize);\r\n        let newHeight = Math.floor(canvasHeight / newCellSize);\r\n    \r\n        let newGrid = createGrid(newWidth, newHeight);\r\n        let newNextGrid = createGrid(newWidth, newHeight);\r\n    \r\n        // Calculate offsets for centering the old grid onto the new one\r\n        let xOffset = Math.floor((newWidth - width) / 2);\r\n        let yOffset = Math.floor((newHeight - height) / 2);\r\n    \r\n        // Copy states from the old grid to the new grid with offset adjustments\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                if (y + yOffset >= 0 && y + yOffset < newHeight && x + xOffset >= 0 && x + xOffset < newWidth) {\r\n                    newGrid[y + yOffset][x + xOffset] = grid[y][x];\r\n                    newNextGrid[y + yOffset][x + xOffset] = nextGrid[y][x];\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Update the grid, nextGrid, cellSize, width, and height to the new values\r\n        grid = newGrid;\r\n        nextGrid = newNextGrid;\r\n        cellSize = newCellSize;\r\n        width = newWidth;\r\n        height = newHeight; \r\n        updateCounter = 0;\r\n    }\r\n  \r\n  \r\n      window.addEventListener('resize', resizeListener);\r\n  \r\n      function createGrid(width, height) {\r\n          return new Array(height).fill(null).map(() => new Array(width).fill(false));\r\n      }\r\n  \r\n      function countNeighbors(grid, x, y) {\r\n          let count = 0;\r\n          for (let dx = -1; dx <= 1; dx++) {\r\n              for (let dy = -1; dy <= 1; dy++) {\r\n                  if (dx !== 0 || dy !== 0) {\r\n                      const nx = x + dx;\r\n                      const ny = y + dy;\r\n                      if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\r\n                          count += grid[ny][nx] ? 1 : 0;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          return count;\r\n      }\r\n  \r\n      function render(grid) {\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          for (let y = 0; y < height; y++) {\r\n              waveAmplitude = (waveAmplitude + 1) % 1;\r\n              for (let x = 0; x < width; x++) {\r\n                  if (grid[y][x]) {\r\n                      if (Math.sin(2*x+y) > 0.5) {\r\n                          ctx.fillStyle = 'rgba(150, 75, 200, 0.9)';\r\n                      }\r\n                      else {\r\n                          ctx.fillStyle = 'rgba(75,150,200,0.9)';\r\n                      }\r\n                      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  \r\n      function update() {\r\n          ctx.fillStyle = 'rgba(255,1,1,1.0)'\r\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n          for (let i = 0; i < columnsToUpdate; i++) {\r\n              \r\n              for (let y = 0; y < height; y++) {\r\n                  offset = Math.sin(updateCounter) * waveAmplitude + Math.cos(updateCounter) * waveAmplitude + Math.sin(updateCounter*1.5) * waveAmplitude;\r\n                  columnToUpdate = (Math.round(updateCounter + offset) + i) % width;\r\n                  const neighbors = countNeighbors(grid, columnToUpdate, y);\r\n                  nextGrid[y][columnToUpdate] = ( neighbors > 6 || neighbors === 3 || neighbors === 2 && grid[y][columnToUpdate]);\r\n                  if (updateCounter < stopPopTime) {\r\n                      let random_num = Math.random();\r\n                      if (y > 0) nextGrid[y-1][columnToUpdate] |= (random_num < 0.04);\r\n                      if (columnToUpdate < columnsToUpdate) nextGrid[y][columnToUpdate+1] |= (random_num < 0.03);\r\n                      if (columnToUpdate+1 < columnsToUpdate) nextGrid[y][columnToUpdate+2] |= (random_num < 0.02);\r\n                      if (columnToUpdate+2 < columnsToUpdate) nextGrid[y][columnToUpdate+3] |= (random_num < 0.01);\r\n                      if (columnToUpdate+3 < columnsToUpdate) nextGrid[y][columnToUpdate+4] |= (random_num < 0.5);\r\n                  }\r\n                  if (updateCounter > resetTime - dePopTime) {\r\n                      let random_num = Math.random();\r\n                      nextGrid[y][columnToUpdate] = ((neighbors === 1 && Math.random() > 0.98) || neighbors === 4 || neighbors === 3 || neighbors === 2) && Math.random() > 0.5375;\r\n                  }               \r\n              }\r\n              // Copy the updated column from nextGrid to grid\r\n              for (let y = 0; y < height; y++) {\r\n                  grid[y][columnToUpdate] = nextGrid[y][columnToUpdate];\r\n              }\r\n          }\r\n  \r\n          if ((updateCounter > resetTime && Math.random() > 0.90) || (updateCounter > resetTime*1.5 && Math.random() > 0.4)) {\r\n              updateCounter = stopPopTime;\r\n          }\r\n  \r\n          render(grid);\r\n          updateCounter++;\r\n      }\r\n  \r\n      // Initialize the grid with random values\r\n      grid.forEach(row => {\r\n          row.forEach((cell, index) => {\r\n              row[index] = Math.random() + Math.random() < randAmt;\r\n          });\r\n      });\r\n  \r\n      // Start the animation loop\r\n      // Start the animation loop with initial speed\r\n      let start = performance.now();\r\n      let delay = 20; // Delay between frames in milliseconds\r\n  \r\n      function startAnimation(timestamp) {\r\n          if (timestamp - start >= delay) {\r\n              update();\r\n              start = timestamp;\r\n          }\r\n  \r\n          requestAnimationFrame(startAnimation);\r\n      }\r\n  \r\n      startAnimation(performance.now());\r\n  \r\n      // Optional: You might want to clean up the animation if the component is unmounted\r\n      return () => {\r\n          window.removeEventListener('resize', resizeListener);\r\n        };\r\n      }, []); // Empty dependency array means this useEffect runs once when the component mounts\r\n    \r\n      return <div style={{width: '100vw', height: '100vh'}} ref={containerRef}></div>;\r\n  }\r\n\r\nexport default Animation;\r\n\r\n"],"names":["Index","React","className","id","style","width","height","Animation","color","href","containerRef","useRef","useEffect","console","log","container","current","canvas","document","createElement","ctx","getContext","titleDiv","totalCells","canvasWidth","clientWidth","canvasHeight","clientHeight","cellSize","Math","sqrt","floor","grid","createGrid","nextGrid","waveAmplitude","columnsToUpdate","offset","columnToUpdate","updateCounter","stopPopTime","resetTime","dePopTime","resizeListener","newCellSize","newWidth","newHeight","newGrid","newNextGrid","xOffset","yOffset","y","x","Array","fill","map","countNeighbors","count","dx","dy","nx","ny","update","fillStyle","fillRect","i","sin","cos","round","neighbors","random_num","random","clearRect","render","appendChild","globalAlpha","window","addEventListener","forEach","row","cell","index","start","performance","now","startAnimation","timestamp","requestAnimationFrame","removeEventListener","ref"],"sourceRoot":""}